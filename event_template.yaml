AWSTemplateFormatVersion: 2010-09-09
Description: >
  A single event listener that handles events from an Event Bus.

Parameters:
  EventBusName:
    Type: String
    Description: Name of event bus to listen for events on

  # Both ConnectionsUrl & WebSocketApiArn are sourced from the same place.
  # Both are composed but only one requires the deployed stage.
  # Is there a better way to consolidate or pass them?
  ConnectionsUrl:
    Type: String
    Description: https:// URL of websocket API Gateway to connect to

  WebSocketApiArn:
    Type: String
    Description: The ARN of the Websocket API Gateway associated to ConnectionsUrl

  Message:
    Type: String
    Description: The Hello in the Hello World message to stream to a connection

Resources:
  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Take events and throw them directly to a lambda
      EventBusName: !Ref EventBusName
      # Effectively match all events because the only event version is 0
      EventPattern: |
        {
          "version": ["0"]
        }
      Targets:
        - Arn: !GetAtt LambdaEventListener.Arn
          Id: !Sub '${AWS::StackName}-event-handler'
    DependsOn: 
      - LambdaEventListener

  LambdaEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventListener.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRule.Arn
    DependsOn:
      - LambdaEventListener
      - LambdaEventRule

  LambdaEventListener:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !Ref EventBusName
          ENDPOINT_URL: !Ref ConnectionsUrl
          MESSAGE: !Ref Message
      Code:
        ZipFile: |
          import os
          import boto3
          client = boto3.client("apigatewaymanagementapi", endpoint_url=os.getenv("ENDPOINT_URL"))
          def lambda_handler(event, context):
              print("url:", os.getenv("ENDPOINT_URL"))
              print(event)
              message = os.getenv("MESSAGE", "Hello")
              print(f"Message: {message!r}")
              client.post_to_connection(
                  Data=f"{message} {event['detail']['Hello']}".encode(),
                  ConnectionId=event["source"],
              )

    DependsOn: LambdaRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-api-connections'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "execute-api:ManageConnections"
                Resource: !Ref WebSocketApiArn
