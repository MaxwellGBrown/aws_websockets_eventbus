AWSTemplateFormatVersion: 2010-09-09
Description: >
  A single event listener that handles events from an Event Bus.

Parameters:
  Message:
    Type: String
    Description: The Hello in the Hello World message to stream to a connection

Resources:
  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Take events and throw them directly to a lambda
      EventBusName: !ImportValue example-event-bus-id
      # Effectively match all events because the only event version is 0
      EventPattern: |
        {
          "detail-type": ["Echo"]
        }
      Targets:
        - Arn: !GetAtt LambdaEventListener.Arn
          Id: !Sub '${AWS::StackName}-event-handler'
    DependsOn: 
      - LambdaEventListener

  LambdaEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventListener.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRule.Arn
    DependsOn:
      - LambdaEventListener
      - LambdaEventRule

  LambdaEventListener:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !ImportValue example-event-bus-id
          MESSAGE: !Ref Message
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          eventbridge = boto3.client("events")
          def lambda_handler(event, context):
              print(event)
              message = os.getenv("MESSAGE", "Hello")
              events = [
                  {
                      "Source": "LambdaEventListener",
                      "Resources": [context.invoked_function_arn],
                      "DetailType": "Notification",
                      "Detail": json.dumps({
                          "message": f"{message} {event['detail']['message']} {message}",
                          "recipients": [event["detail"]["sender"]],
                      }),
                      "EventBusName": os.getenv("EVENT_BUS"),
                  }
              ]
              print(events)
              eventbridge.put_events(Entries=events)

    DependsOn: LambdaRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-put-events'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"  # PutEvents does not restrict at the resource level
